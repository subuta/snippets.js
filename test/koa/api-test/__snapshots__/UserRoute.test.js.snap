// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`koa/api/UserRoute should create koa UserRoute 1`] = `
"import test from 'ava'
import _ from 'lodash'
import sinon from 'sinon'
import request from 'supertest'
import {jwksEndpoint} from 'jwks-rsa/tests/mocks/jwks'
import {publicKey, privateKey} from 'jwks-rsa/tests/mocks/keys'
import {createToken} from 'jwks-rsa/tests/mocks/tokens'
import Koa from 'koa'
import importFresh from 'import-fresh'
import {absolutePath} from '../../config'
import {currentUser} from 'test/helper/user'
import runSeed, {runMigration} from 'test/helper/fixtures'
import proxyquire from 'proxyquire'

const sandbox = sinon.sandbox.create()

test.beforeEach(async (t) => {
  const knex = importFresh(absolutePath('src/utils/knex')).default

  await runMigration(knex)
  await runSeed(knex)

  const api = require('test/helper/mocked').api(knex)
  const models = require('test/helper/mocked').model(knex)

  const app = new Koa()
  // handle /api requests
  app.use(api.routes())
  app.use(api.allowedMethods())

  t.context = {
    ...models,
    request: request(app.listen(0))
  }
})

test.afterEach((t) => {
  sandbox.reset()
})

test('get me should return user', async (t) => {
  const {request} = t.context

  // mock jwks
  const token = createToken(privateKey, '123', currentUser)
  jwksEndpoint('http://localhost', [{pub: publicKey, kid: '123'}])

  const response = await request
    .get('/api/users/me')
    .set('Authorization', \`Bearer \${token}\`)

  t.is(response.status, 200)
  t.deepEqual(response.body.id, 19270)
})

test('put me should update user if exists', async (t) => {
  const {request, User} = t.context

  const user = await User.query().first({auth0Id: 'google-oauth2|dummy'})

  // mock jwks
  const token = createToken(privateKey, '123', currentUser)
  jwksEndpoint('http://localhost', [{pub: publicKey, kid: '123'}])

  const response = await request
    .put('/api/users/me')
    .set('Authorization', \`Bearer \${token}\`)
    .send({
      user: {
        id: 19270,
        auth0Id: 60926,
        locale: 'en_BORK',
        nickname: 'neural',
        status: 'magenta Personal Loan Account',
        avatar:
          'https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg',
        created_at: '1970-05-03T17:39:05.087Z',
        updated_at: '1970-03-18T01:59:20.639Z'
      }
    })

  t.is(response.status, 200)

  t.deepEqual(response.body.id, 19270)
  t.deepEqual(response.body.auth0Id, 60926)
  t.deepEqual(response.body.locale, 'en_BORK')
  t.deepEqual(response.body.nickname, 'neural')
  t.deepEqual(response.body.status, 'magenta Personal Loan Account')
  t.deepEqual(
    response.body.avatar,
    'https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg'
  )
  t.deepEqual(response.body.created_at, '1970-05-03T17:39:05.087Z')
  t.deepEqual(response.body.updated_at, '1970-03-18T01:59:20.639Z')
})

test('put me should create user if not exists', async (t) => {
  const {request, User} = t.context

  let user = await User.query().findFirst({auth0Id: 'google-oauth2|another'})
  t.is(user, undefined)

  const anotherUser = {
    iss: 'https://xxx.com/',
    sub: 'google-oauth2|another',
    aud: ['https://xxx.com/api', 'https://xxx.auth0.com/userinfo'],
    scope: 'openid profile email'
  }

  // mock jwks
  const token = createToken(privateKey, '123', anotherUser)
  jwksEndpoint('http://localhost', [{pub: publicKey, kid: '123'}])

  const response = await request
    .put('/api/users/me')
    .set('Authorization', \`Bearer \${token}\`)
    .send({
      user: {
        id: 19270,
        auth0Id: 60926,
        locale: 'en_BORK',
        nickname: 'neural',
        status: 'magenta Personal Loan Account',
        avatar:
          'https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg',
        created_at: '1970-05-03T17:39:05.087Z',
        updated_at: '1970-03-18T01:59:20.639Z'
      }
    })

  t.is(response.status, 200)

  t.deepEqual(response.body.id, 19270)
  t.deepEqual(response.body.auth0Id, 60926)
  t.deepEqual(response.body.locale, 'en_BORK')
  t.deepEqual(response.body.nickname, 'neural')
  t.deepEqual(response.body.status, 'magenta Personal Loan Account')
  t.deepEqual(
    response.body.avatar,
    'https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg'
  )
  t.deepEqual(response.body.created_at, '1970-05-03T17:39:05.087Z')
  t.deepEqual(response.body.updated_at, '1970-03-18T01:59:20.639Z')
})
"
`;
