// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`koa/api/UserRoute should create koa UserRoute 1`] = `
"import test from 'ava'
import _ from 'lodash'
import sinon from 'sinon'
import request from 'supertest'
import {jwksEndpoint} from 'jwks-rsa/tests/mocks/jwks'
import {publicKey, privateKey} from 'jwks-rsa/tests/mocks/keys'
import {createToken} from 'jwks-rsa/tests/mocks/tokens'
import Koa from 'koa'
import importFresh from 'import-fresh'
import {absolutePath} from '../../../config'
import {currentUser, createPayload} from 'test/api/helper/user'
import runSeed, {runMigration} from 'test/api/helper/fixtures'
import proxyquire from 'proxyquire'

const sandbox = sinon.sandbox.create()

test.beforeEach(async (t) => {
  const knex = importFresh(absolutePath('src/api/utils/knex')).default

  await runMigration(knex)
  await runSeed(knex)

  const api = require('test/api/helper/mocked').api(knex)
  const models = require('test/api/helper/mocked').model(knex)

  const app = new Koa()
  // handle /api requests
  app.use(api.routes())
  app.use(api.allowedMethods())

  t.context = {
    ...models,
    request: request(app.listen(0))
  }
})

test.afterEach((t) => {
  sandbox.reset()
})

test('get me should return user', async (t) => {
  const {request} = t.context

  // mock jwks
  const token = createToken(privateKey, '123', currentUser)
  jwksEndpoint('http://localhost', [{pub: publicKey, kid: '123'}])

  const response = await request
    .get('/api/users/me')
    .set('Authorization', \`Bearer \${token}\`)

  t.is(response.status, 200)

  t.deepEqual(response.body.id, 25376)
  t.deepEqual(response.body.locale, 'ko')
  t.deepEqual(response.body.nickname, 'Madisen.Kling')
  t.deepEqual(response.body.status, 'Liberian Dollar')
  t.deepEqual(response.body.isAdmin, false)
  t.deepEqual(
    response.body.avatar,
    'https://s3.amazonaws.com/uifaces/faces/twitter/woodydotmx/128.jpg'
  )
})

test('put me should update user if exists', async (t) => {
  const {request, User} = t.context

  const user = await User.query().findOne({
    auth0Id: '2e00568e-58c4-44d2-a3b4-785f8c0a1b70'
  })
  t.not(user, undefined)

  // mock jwks
  const token = createToken(privateKey, '123', createPayload(user.auth0Id))
  jwksEndpoint('http://localhost', [{pub: publicKey, kid: '123'}])

  const response = await request
    .put('/api/users/me')
    .set('Authorization', \`Bearer \${token}\`)
    .send({
      user: {
        id: 25376,
        auth0Id: '2e00568e-58c4-44d2-a3b4-785f8c0a1b70',
        locale: 'pt_BR',
        nickname: 'Mathew_Kunde22',
        status: 'Shirt 1080p rich',
        isAdmin: false,
        avatar:
          'https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg'
      }
    })

  t.is(response.status, 200)

  t.deepEqual(response.body.id, 25376)
  t.deepEqual(response.body.locale, 'pt_BR')
  t.deepEqual(response.body.nickname, 'Mathew_Kunde22')
  t.deepEqual(response.body.status, 'Shirt 1080p rich')
  t.deepEqual(response.body.isAdmin, false)
  t.deepEqual(
    response.body.avatar,
    'https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg'
  )
})

test('post me should create user if not exists', async (t) => {
  const {request, User} = t.context

  const user = await User.query().findOne({
    auth0Id: '742878ce-a5da-4516-81f5-40a57d55284c'
  })
  t.is(user, undefined)

  // mock jwks
  const token = createToken(
    privateKey,
    '123',
    createPayload('742878ce-a5da-4516-81f5-40a57d55284c')
  )
  jwksEndpoint('http://localhost', [{pub: publicKey, kid: '123'}])

  const response = await request
    .post('/api/users/me')
    .set('Authorization', \`Bearer \${token}\`)
    .send({
      user: {
        id: 53297,
        auth0Id: '742878ce-a5da-4516-81f5-40a57d55284c',
        locale: 'pt_BR',
        nickname: 'Mathew_Kunde22',
        status: 'Shirt 1080p rich',
        isAdmin: true,
        avatar:
          'https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg'
      }
    })

  t.is(response.status, 200)

  // should ignore invalid id param
  t.not(response.body.id, 53297)

  // other props should persisted.
  t.deepEqual(response.body.locale, 'pt_BR')
  t.deepEqual(response.body.nickname, 'Mathew_Kunde22')
  t.deepEqual(response.body.status, 'Shirt 1080p rich')
  t.deepEqual(response.body.isAdmin, true)
  t.deepEqual(
    response.body.avatar,
    'https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg'
  )
})

test('post me should not create new user if already exists', async (t) => {
  const {request, User} = t.context

  await User.query()
    .insert({
      id: 53297,
      auth0Id: '742878ce-a5da-4516-81f5-40a57d55284c',
      locale: 'pt_BR',
      nickname: 'Mathew_Kunde22',
      status: 'Shirt 1080p rich',
      isAdmin: true,
      avatar:
        'https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg'
    })
    .eager('')

  const user = await User.query().findOne({
    auth0Id: '742878ce-a5da-4516-81f5-40a57d55284c'
  })

  // mock jwks
  const token = createToken(
    privateKey,
    '123',
    createPayload('742878ce-a5da-4516-81f5-40a57d55284c')
  )
  jwksEndpoint('http://localhost', [{pub: publicKey, kid: '123'}])

  const response = await request
    .post('/api/users/me')
    .set('Authorization', \`Bearer \${token}\`)
    .send({
      user: {
        id: 53297,
        auth0Id: '742878ce-a5da-4516-81f5-40a57d55284c',
        locale: 'pt_BR',
        nickname: 'Mathew_Kunde22',
        status: 'Shirt 1080p rich',
        isAdmin: true,
        avatar:
          'https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg'
      }
    })

  t.is(response.status, 200)

  // All props should persisted.
  t.deepEqual(response.body.id, 53297)
  t.deepEqual(response.body.locale, 'pt_BR')
  t.deepEqual(response.body.nickname, 'Mathew_Kunde22')
  t.deepEqual(response.body.status, 'Shirt 1080p rich')
  t.deepEqual(response.body.isAdmin, true)
  t.deepEqual(
    response.body.avatar,
    'https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg'
  )
})

/* mat Custom test [start] */
/* mat Custom test [end] */
"
`;
