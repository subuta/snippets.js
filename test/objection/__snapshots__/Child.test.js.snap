// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`objection/Child should create objection Child 1`] = `
"import Model from './Model'
import _ from 'lodash'

export default class Book extends Model {
  // SEE: https://github.com/Vincit/objection.js/issues/825
  $parseDatabaseJson(db) {
    // Remember to call the super class's implementation.
    const json = super.$parseDatabaseJson(db)

    return json
  }

  $formatDatabaseJson(json) {
    return super.$formatDatabaseJson(json)
  }

  static register = (models) => {
    // then define relationMappings.
    Book.relationMappings = {
      comments: {
        modelClass: models.Comment,
        relation: Model.HasManyRelation,
        join: {from: 'books.id', to: 'comments.bookId'}
      }
    }
  }

  static tableName = 'books'

  static jsonSchema = {
    title: 'Book',
    $id: 'http://sub-labo.com/schemas/book.json',
    type: 'object',
    required: ['title'],
    properties: {id: {type: 'integer'}, title: {type: 'string'}}
  }
}
"
`;

exports[`objection/Child should create objection Child with Boolean property 1`] = `
"import Model from './Model'
import _ from 'lodash'

export default class Book extends Model {
  // SEE: https://github.com/Vincit/objection.js/issues/825
  $parseDatabaseJson(db) {
    // Remember to call the super class's implementation.
    const json = super.$parseDatabaseJson(db)

    if (_.isNumber(parseInt(json['isOutOfPrint']))) {
      json['isOutOfPrint'] = !!json['isOutOfPrint']
    }

    return json
  }

  $formatDatabaseJson(json) {
    return super.$formatDatabaseJson(json)
  }

  static register = (models) => {
    // then define relationMappings.
    Book.relationMappings = {
      comments: {
        modelClass: models.Comment,
        relation: Model.HasManyRelation,
        join: {from: 'books.id', to: 'comments.bookId'}
      }
    }
  }

  static tableName = 'books'

  static jsonSchema = {
    title: 'Book',
    $id: 'http://sub-labo.com/schemas/book.json',
    type: 'object',
    required: ['title'],
    properties: {
      id: {type: 'integer'},
      title: {type: 'string'},
      isOutOfPrint: {type: 'boolean'}
    }
  }
}
"
`;

exports[`objection/Child should create objection Child with Boolean property 2`] = `
"import Model from './Model'
import _ from 'lodash'

export default class Book extends Model {
  // SEE: https://github.com/Vincit/objection.js/issues/825
  $parseDatabaseJson(db) {
    // Remember to call the super class's implementation.
    const json = super.$parseDatabaseJson(db)

    if (_.isNumber(parseInt(json['isOutOfPrint']))) {
      json['isOutOfPrint'] = !!json['isOutOfPrint']
    }

    return json
  }

  $formatDatabaseJson(json) {
    return super.$formatDatabaseJson(json)
  }

  static register = (models) => {
    // then define relationMappings.
    Book.relationMappings = {
      comments: {
        modelClass: models.Comment,
        relation: Model.HasManyRelation,
        join: {from: 'books.id', to: 'comments.bookId'}
      }
    }
  }

  static tableName = 'books'

  static jsonSchema = {
    title: 'Book',
    $id: 'http://sub-labo.com/schemas/book.json',
    type: 'object',
    required: ['title'],
    properties: {
      id: {type: 'integer'},
      title: {type: 'string'},
      isOutOfPrint: {type: 'boolean'}
    }
  }
}
"
`;

exports[`objection/Child should create objection Child with MorphAs property 1`] = `
"import Model from './Model'
import _ from 'lodash'

export default class Book extends Model {
  // SEE: https://github.com/Vincit/objection.js/issues/825
  $parseDatabaseJson(db) {
    // Remember to call the super class's implementation.
    const json = super.$parseDatabaseJson(db)

    if (_.isNumber(parseInt(json['isOutOfPrint']))) {
      json['isOutOfPrint'] = !!json['isOutOfPrint']
    }

    return json
  }

  $formatDatabaseJson(json) {
    return super.$formatDatabaseJson(json)
  }

  static register = (models) => {
    // then define relationMappings.
    Book.relationMappings = {
      comments: {
        modelClass: models.Comment,
        relation: Model.HasManyRelation,
        filter: {
          commentableType: 'Book'
        },
        beforeInsert: (model) => {
          model.commentableType = 'Book'
        },
        join: {from: 'books.id', to: 'comments.commentableId'}
      }
    }
  }

  static tableName = 'books'

  static jsonSchema = {
    title: 'Book',
    $id: 'http://sub-labo.com/schemas/book.json',
    type: 'object',
    required: ['title'],
    properties: {
      id: {type: 'integer'},
      title: {type: 'string'},
      isOutOfPrint: {type: 'boolean'}
    }
  }
}
"
`;
